//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
[System.ServiceModel.ServiceContractAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin", ConfigurationName="checkTinPortType")]
public interface checkTinPortType
{
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
    [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
    System.Threading.Tasks.Task<checkTinResponse> checkTinAsync(checkTinRequest request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
[System.ServiceModel.MessageContractAttribute(WrapperName="checkTin", WrapperNamespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", IsWrapped=true)]
public partial class checkTinRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=0)]
    public string countryCode;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=1)]
    public string tinNumber;
    
    public checkTinRequest()
    {
    }
    
    public checkTinRequest(string countryCode, string tinNumber)
    {
        this.countryCode = countryCode;
        this.tinNumber = tinNumber;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
[System.ServiceModel.MessageContractAttribute(WrapperName="checkTinResponse", WrapperNamespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", IsWrapped=true)]
public partial class checkTinResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=0)]
    public string countryCode;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=1)]
    public string tinNumber;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=2)]
    [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
    public System.DateTime requestDate;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=3)]
    public bool validStructure;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="urn:ec.europa.eu:taxud:tin:services:checkTin:types", Order=4)]
    public bool validSyntax;
    
    public checkTinResponse()
    {
    }
    
    public checkTinResponse(string countryCode, string tinNumber, System.DateTime requestDate, bool validStructure, bool validSyntax)
    {
        this.countryCode = countryCode;
        this.tinNumber = tinNumber;
        this.requestDate = requestDate;
        this.validStructure = validStructure;
        this.validSyntax = validSyntax;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
public interface checkTinPortTypeChannel : checkTinPortType, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
public partial class checkTinPortTypeClient : System.ServiceModel.ClientBase<checkTinPortType>, checkTinPortType
{
    
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
    
    public checkTinPortTypeClient() : 
            base(checkTinPortTypeClient.GetDefaultBinding(), checkTinPortTypeClient.GetDefaultEndpointAddress())
    {
        this.Endpoint.Name = EndpointConfiguration.checkTinPort.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public checkTinPortTypeClient(EndpointConfiguration endpointConfiguration) : 
            base(checkTinPortTypeClient.GetBindingForEndpoint(endpointConfiguration), checkTinPortTypeClient.GetEndpointAddress(endpointConfiguration))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public checkTinPortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
            base(checkTinPortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public checkTinPortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(checkTinPortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
    {
        this.Endpoint.Name = endpointConfiguration.ToString();
        ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }
    
    public checkTinPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Threading.Tasks.Task<checkTinResponse> checkTinAsync(checkTinRequest request)
    {
        return base.Channel.checkTinAsync(request);
    }
    
    public virtual System.Threading.Tasks.Task OpenAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }
    
    public virtual System.Threading.Tasks.Task CloseAsync()
    {
        return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }
    
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.checkTinPort))
        {
            System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
            result.MaxBufferSize = int.MaxValue;
            result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
            result.MaxReceivedMessageSize = int.MaxValue;
            result.AllowCookies = true;
            result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
            return result;
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
    {
        if ((endpointConfiguration == EndpointConfiguration.checkTinPort))
        {
            return new System.ServiceModel.EndpointAddress("https://ec.europa.eu/taxation_customs/tin/services/checkTinService");
        }
        throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }
    
    private static System.ServiceModel.Channels.Binding GetDefaultBinding()
    {
        return checkTinPortTypeClient.GetBindingForEndpoint(EndpointConfiguration.checkTinPort);
    }
    
    private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
    {
        return checkTinPortTypeClient.GetEndpointAddress(EndpointConfiguration.checkTinPort);
    }
    
    public enum EndpointConfiguration
    {
        
        checkTinPort,
    }
}
